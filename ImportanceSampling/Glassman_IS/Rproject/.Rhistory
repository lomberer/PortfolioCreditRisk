#Step 2
p_Z <- pnorm((a%*%Z+qnorm(p))/b)
theta_x <- gettheta_x(x,p_Z,c)
#print(theta_x)
p_theta <- getp_theta(theta_x,p,c)
#Step 3
X <- a%*%Z+b*rnorm(m)
Y <- X>qnorm(1-p_theta)
L <- sum(Y*c)
#print(L)
weight=exp(-theta_x*L+getpsi(theta_x,p_theta,c)
-t(mu)%*%Z+t(mu)%*%mu/2)
res <- c(L,weight)
names(res) <- c("LossAmount","LossProb")
return(res)
}
Glassman_MC()
Glassman_MC()
Glassman_MC()
Glassman_MC()
Glassman_MC()
Glassman_MC()
Glassman_MC()
Glassman_MC()
Glassman_MC()
Glassman_MC()
Glassman_MC()
Glassman_MC()
Glassman_MC()
Glassman_MC()
Glassman_MC()
Glassman_MC()
Glassman_MC()
Glassman_MC()
plot(p_theta)
plot(p)
plot(p_Z)
X
plot(X)
plot(qnorm(1-p_theta))
plot(qnorm(1-p))
Glassman_MC <- function(){
#Step 1
Z = rnorm(d,mean=mu,sd=1)
#Step 2
p_Z <- pnorm((a%*%Z+qnorm(p))/b)
theta_x <- gettheta_x(x,p_Z,c)
#print(theta_x)
p_theta <- getp_theta(theta_x,p_Z,c)
#Step 3
X <- a%*%Z+b*rnorm(m)
Y <- X>qnorm(1-p_theta)
L <- sum(Y*c)
#print(L)
weight=exp(-theta_x*L+getpsi(theta_x,p_theta,c)
-t(mu)%*%Z+t(mu)%*%mu/2)
res <- c(L,weight)
names(res) <- c("LossAmount","LossProb")
return(res)
}
Glassman_MC()
Glassman_MC()
Glassman_MC()
Glassman_MC()
Glassman_MC()
Glassman_MC()
resv=rep(NA,100)
for (i in 1:100){
resv[i] = Glassman_MC()
}
warnings()
resv=rep(c(NA,NA),100)
for (i in 1:100){
resv[i] = Glassman_MC()
}
warnings
warnings()
resv
N = 100
resv=data.frame(Loss=rep(NA,N),Prob=rep(NA,N))
for (i in 1:N){
resv[i,1] = Glassman_MC()[1]
resv[i,2] = Glassman_MC()[2]
}
plot(resv)
resv
mu=rep(0.8,d)
Glassman_MC <- function(){
#Step 1
Z = rnorm(d,mean=mu,sd=1)
#Step 2
p_Z <- pnorm((a%*%Z+qnorm(p))/b)
theta_x <- gettheta_x(x,p_Z,c)
#print(theta_x)
p_theta <- getp_theta(theta_x,p_Z,c)
#Step 3
X <- a%*%Z+b*rnorm(m)
Y <- X>qnorm(1-p_theta)
L <- sum(Y*c)
#print(L)
weight=exp(-theta_x*L+getpsi(theta_x,p,c)
-t(mu)%*%Z+t(mu)%*%mu/2)
res <- c(L,weight)
names(res) <- c("LossAmount","LossProb")
return(res)
}
N = 100
resv=data.frame(Loss=rep(NA,N),Prob=rep(NA,N))
for (i in 1:N){
resv[i,1] = Glassman_MC()[1]
resv[i,2] = Glassman_MC()[2]
}
resv
Glassman_MC <- function(){
#Step 1
Z = rnorm(d,mean=mu,sd=1)
#Step 2
p_Z <- pnorm((a%*%Z+qnorm(p))/b)
theta_x <- gettheta_x(x,p_Z,c)
#print(theta_x)
p_theta <- getp_theta(theta_x,p_Z,c)
#Step 3
X <- a%*%Z+b*rnorm(m)
Y <- X>qnorm(1-p_theta)
L <- sum(Y*c)
#print(L)
#weight=exp(-theta_x*L+getpsi(theta_x,p,c)
-t(mu)%*%Z+t(mu)%*%mu/2)
weight=exp(
-t(mu)%*%Z+t(mu)%*%mu/2)/1000
res <- c(L,weight)
names(res) <- c("LossAmount","LossProb")
return(res)
}
N = 100
resv=data.frame(Loss=rep(NA,N),Prob=rep(NA,N))
for (i in 1:N){
resv[i,1] = Glassman_MC()[1]
resv[i,2] = Glassman_MC()[2]
}
resv
Glassman_MC <- function(){
#Step 1
Z = rnorm(d,mean=mu,sd=1)
#Step 2
p_Z <- pnorm((a%*%Z+qnorm(p))/b)
theta_x <- gettheta_x(x,p_Z,c)
#print(theta_x)
p_theta <- getp_theta(theta_x,p_Z,c)
#Step 3
X <- a%*%Z+b*rnorm(m)
Y <- X>qnorm(1-p_theta)
L <- sum(Y*c)
#print(L)
#weight=exp(-theta_x*L+getpsi(theta_x,p,c)
#           -t(mu)%*%Z+t(mu)%*%mu/2)
weight=exp(
-t(mu)%*%Z+t(mu)%*%mu/2)/1000
res <- c(L,weight)
names(res) <- c("LossAmount","LossProb")
return(res)
}
N = 100
resv=data.frame(Loss=rep(NA,N),Prob=rep(NA,N))
for (i in 1:N){
resv[i,1] = Glassman_MC()[1]
resv[i,2] = Glassman_MC()[2]
}
resv
N = 100
resv=data.frame(Loss=rep(NA,N),Weights=rep(NA,N))
for (i in 1:N){
resv[i,1] = Glassman_MC()[1]
resv[i,2] = Glassman_MC()[2]
}
lossquantile <- function(LossRes){
LossAmt <- LossRes$Loss
LossWgt <- LossRes$Weights
return(wtd.quantile(LossAmt,weights=LossWgt,probs=q,normwt=T,type='i/n'))
}
lossquantile(resv)
resv$Loss
resv$Weights
lossquantile(resv)
q = c(0.5,0.9,0.95,0.99,0.999,0.9999)
lossquantile(resv)
lossplot <- function(LossRes){
LossAmt <- LossRes$Loss
LossWgt <- LossRes$Weights
Ecdf(LossAmt,weights = LossWgt,datadensity='density',xlim=c(0,10000),ylim=c(0.9,1),q=q)
}
lossplot(resv)
lossplot <- function(LossRes){
LossAmt <- LossRes$Loss
LossWgt <- LossRes$Weights
Ecdf(LossAmt,weights = LossWgt,datadensity='density',xlim=c(0,10000),ylim=c(0.5,1),q=q)
}
lossplot(resv)
resv
plot(resv$Weights)
plot(resv$Loss,resv$Weights)
N = 1000
N = 1000
resv=data.frame(Loss=rep(NA,N),Weights=rep(NA,N))
for (i in 1:N){
resv[i,1] = Glassman_MC()[1]
resv[i,2] = Glassman_MC()[2]
}
lossquantile(LossRes)
lossquantile(resv)
p*C
sum(p*c)
Glassman_MC <- function(){
#Step 1
Z = rnorm(d,mean=mu,sd=1)
#Step 2
p_Z <- pnorm((a%*%Z+qnorm(p))/b)
theta_x <- gettheta_x(x,p_Z,c)
#print(theta_x)
p_theta <- getp_theta(theta_x,p_Z,c)
#Step 3
X <- a%*%Z+b*rnorm(m)
Y <- X>qnorm(1-p_theta)
L <- sum(Y*c)
#print(L)
#weight=exp(-theta_x*L+getpsi(theta_x,p,c)
#           -t(mu)%*%Z+t(mu)%*%mu/2)
weight=exp(-theta_x*L+getpsi(theta_x,p,c)
-t(mu)%*%Z+t(mu)%*%mu/2)/1000
res <- c(L,weight)
names(res) <- c("LossAmount","LossProb")
return(res)
}
N = 1000
resv=data.frame(Loss=rep(NA,N),Weights=rep(NA,N))
for (i in 1:N){
resv[i,1] = Glassman_MC()[1]
resv[i,2] = Glassman_MC()[2]
}
lossquantile(resv)
resv
wgt <- function(L){
return(exp(-theta_x*L+getpsi(theta_x,p,c)
-t(mu)%*%Z+t(mu)%*%mu/2))
}
wgt(seq(100,10000,by=100))
plot(wgt(seq(100,10000,by=100)))
plot(wgt(seq(100,10000,by=100)))
plot(wgt(seq(1000,10000,by=100)))
wgt(5000)
sum(p_Z*c)
exp(-0*L+getpsi(0,p,c)
-t(mu)%*%Z+t(mu)%*%mu/2)
exp(-t(mu)%*%Z+t(mu)%*%mu/2)
getpsi(theta_x,p,c)
getpsi(theta_x,p_Z,c)
-theta_x*L
L
exp(-theta_x*L+getpsi(theta_x,p_Z,c))
exp(-theta_x*L+getpsi(theta_x,p_Z,c)
-t(mu)%*%Z+t(mu)%*%mu/2)
-t(mu)%*%Z+t(mu)%*%mu/2
L
sum(P_Z*c)
sum(p_Z*c)
sum(p*c)
sum(Y)
Y <- rnorm(m)>qnorm(1-p_theta)
sum(Y)
Glassman_MC <- function(){
#Step 1
Z = rnorm(d,mean=mu,sd=1)
#Step 2
p_Z <- pnorm((a%*%Z+qnorm(p))/b)
theta_x <- gettheta_x(x,p_Z,c)
#print(theta_x)
p_theta <- getp_theta(theta_x,p_Z,c)
#Step 3
X <- a%*%Z+b*rnorm(m)
Y <- rnorm(m)>qnorm(1-p_theta)
L <- sum(Y*c)
#print(L)
#weight=exp(-theta_x*L+getpsi(theta_x,p,c)
#           -t(mu)%*%Z+t(mu)%*%mu/2)
weight=exp(-theta_x*L+getpsi(theta_x,p_Z,c)
-t(mu)%*%Z+t(mu)%*%mu/2)
res <- c(L,weight)
names(res) <- c("LossAmount","LossProb")
return(res)
}
N = 100
resv=data.frame(Loss=rep(NA,N),Weights=rep(NA,N))
for (i in 1:N){
resv[i,1] = Glassman_MC()[1]
resv[i,2] = Glassman_MC()[2]
}
resv
wgt(5000)
wgt(1000)
wgt(3000)
-t(mu)%*%Z+t(mu)%*%mu/2
mu=rep(0,d)
Glassman_MC <- function(){
#Step 1
Z = rnorm(d,mean=mu,sd=1)
#Step 2
p_Z <- pnorm((a%*%Z+qnorm(p))/b)
theta_x <- gettheta_x(x,p_Z,c)
#print(theta_x)
p_theta <- getp_theta(theta_x,p_Z,c)
#Step 3
X <- a%*%Z+b*rnorm(m)
Y <- rnorm(m)>qnorm(1-p_theta)
L <- sum(Y*c)
#print(L)
#weight=exp(-theta_x*L+getpsi(theta_x,p,c)
#           -t(mu)%*%Z+t(mu)%*%mu/2)
weight=exp(-theta_x*L+getpsi(theta_x,p_Z,c))
res <- c(L,weight)
names(res) <- c("LossAmount","LossProb")
return(res)
}
N = 100
resv=data.frame(Loss=rep(NA,N),Weights=rep(NA,N))
for (i in 1:N){
resv[i,1] = Glassman_MC()[1]
resv[i,2] = Glassman_MC()[2]
}
resv
Y <- X>qnorm(1-p_theta)
sum(Y)
X
Y <- X>qnorm(1-p)
L <- sum(Y*c)
L
Z = rnorm(d,mean=mu,sd=1)
X <- a%*%Z+b*rnorm(m)
Y <- X>qnorm(1-p)
L <- sum(Y*c)
L
Z = rnorm(d,mean=mu,sd=1)
X <- a%*%Z+b*rnorm(m)
Y <- X>qnorm(1-p)
L <- sum(Y*c)
L
Z = rnorm(d,mean=mu,sd=1)
#Step 2
p_Z <- pnorm((a%*%Z+qnorm(p))/b)
theta_x <- gettheta_x(x,p_Z,c)
#print(theta_x)
p_theta <- getp_theta(theta_x,p_Z,c)
#Step 3
X <- a%*%Z+b*rnorm(m)
Y <- X>qnorm(1-p)
L <- sum(Y*c)
L
Z = rnorm(d,mean=mu,sd=1)
#Step 2
p_Z <- pnorm((a%*%Z+qnorm(p))/b)
theta_x <- gettheta_x(x,p_Z,c)
#print(theta_x)
p_theta <- getp_theta(theta_x,p_Z,c)
#Step 3
X <- a%*%Z+b*rnorm(m)
Y <- X>qnorm(1-p)
L <- sum(Y*c)
L
Z = rnorm(d,mean=mu,sd=1)
#Step 2
p_Z <- pnorm((a%*%Z+qnorm(p))/b)
theta_x <- gettheta_x(x,p_Z,c)
#print(theta_x)
p_theta <- getp_theta(theta_x,p_Z,c)
#Step 3
X <- a%*%Z+b*rnorm(m)
Y <- X>qnorm(1-p_theta)
L <- sum(Y*c)
L
L
theta_x
sum(p_Z*c)
Z = rnorm(d,mean=mu,sd=1)
#Step 2
p_Z <- pnorm((a%*%Z+qnorm(p))/b)
theta_x <- gettheta_x(x,p_Z,c)
#print(theta_x)
p_theta <- getp_theta(theta_x,p,c)
#Step 3
X <- a%*%Z+b*rnorm(m)
Y <- X>qnorm(1-p_theta)
L <- sum(Y*c)
L
theta_x
Z = rnorm(d,mean=mu,sd=1)
#Step 2
p_Z <- pnorm((a%*%Z+qnorm(p))/b)
theta_x <- gettheta_x(x,p_Z,c)
theta_x=0
#print(theta_x)
p_theta <- getp_theta(theta_x,p,c)
#Step 3
X <- a%*%Z+b*rnorm(m)
Y <- X>qnorm(1-p_theta)
L <- sum(Y*c)
L
L
#Step 1
Z = rnorm(d,mean=mu,sd=1)
#Step 2
p_Z <- pnorm((a%*%Z+qnorm(p))/b)
theta_x <- gettheta_x(x,p_Z,c)
#print(theta_x)
p_theta <- getp_theta(theta_x,p,c)
#Step 3
X <- a%*%Z+b*rnorm(m)
Y <- X>qnorm(1-p_theta)
L <- sum(Y*c)
L
weight=exp(-theta_x*L+getpsi(theta_x,p_Z,c))
L*weight
weight=exp(-theta_x*L+getpsi(theta_x,p,c))
L*weight
Z = rnorm(d,mean=mu,sd=1)
#Step 2
p_Z <- pnorm((a%*%Z+qnorm(p))/b)
theta_x <- gettheta_x(x,p_Z,c)
#print(theta_x)
theta_x=0.01
p_theta <- getp_theta(theta_x,p,c)
#Step 3
X <- a%*%Z+b*rnorm(m)
Y <- X>qnorm(1-p_theta)
L <- sum(Y*c)
L
weight=exp(-theta_x*L+getpsi(theta_x,p,c))
weight
L*weight
Z = rnorm(d,mean=mu,sd=1)
#Step 2
p_Z <- pnorm((a%*%Z+qnorm(p))/b)
theta_x <- gettheta_x(x,p_Z,c)
#print(theta_x)
theta_x=0.2
p_theta <- getp_theta(theta_x,p,c)
#Step 3
X <- a%*%Z+b*rnorm(m)
Y <- X>qnorm(1-p_theta)
L <- sum(Y*c)
L
weight=exp(-theta_x*L+getpsi(theta_x,p,c))
weight
weight=exp(-theta_x*L+getpsi(theta_x,p_Z,c))
weight
theta_x <- gettheta_x(x,p,c)
theta_x
p_theta <- getp_theta(theta_x,p,c)
#Step 3
X <- a%*%Z+b*rnorm(m)
Y <- X>qnorm(1-p_theta)
L <- sum(Y*c)
L
weight=exp(-theta_x*L+getpsi(theta_x,p,c))
weight
Z = rnorm(d,mean=mu,sd=1)
#Step 2
p_Z <- pnorm((a%*%Z+qnorm(p))/b)
theta_x <- gettheta_x(x,p_Z,c)
#print(theta_x)
p_theta <- getp_theta(theta_x,p_Z,c)
#Step 3
X <- a%*%Z+b*rnorm(m)
Y <- X>qnorm(1-p_theta)
L <- sum(Y*c)
#print(L)
weight=exp(-theta_x*L+getpsi(theta_x,p_Z,c))
res <- c(L,weight)
res
theta_x
getdpsi(theta_x,p,c)
getdpsi(theta_x,p_Z,c)
Z = rnorm(d,mean=mu,sd=1)
#Step 2
p_Z <- pnorm((a%*%Z+qnorm(p))/b)
theta_x <- gettheta_x(x,p_Z,c)
#print(theta_x)
p_theta <- getp_theta(theta_x,p_Z,c)
#Step 3
X <- a%*%Z+b*rnorm(m)
Y <- rnorm(m)>qnorm(1-p_theta)
L <- sum(Y*c)
#print(L)
weight=exp(-theta_x*L+getpsi(theta_x,p_Z,c))
res <- c(L,weight)
names(res) <- c("LossAmount","LossProb")
res
exp(-theta_x*L+getpsi(theta_x,p_theta,c))
exp(-theta_x*L+getpsi(theta_x,p,c))
exp(-theta_x*L+getpsi(theta_x,p_Z,c))
p_Z
plot(p_Z)
plot(p_theta)
plot(p)
install.packages("Hmisc")
require("Hmisc")
remove.packages("Hmisc")
library(Hmisc)
require("Hmisc")
install.packages("Hmisc")
install.packages("Hmisc")
is.installed <- function(mypkg) is.element(mypkg, installed.packages()[,1])
is.installed(Hmisc)
is.installed("Hmisc")
