{
    "contents" : "---\ntitle: \"ImportantSampling\"\nauthor: \"T Xu\"\noutput: pdf_document\n---\n```{r}\nN <- 1000 #number of loans.\nPosNames <- paste(\"Loan\",1:N,sep=\"\")\nbeta <- rep(0.3,N) #factor loading\nLGD <- rep(0.5,N) \nPD <- rep(0.01,N)\nEAD <- rep(100,N)\n\nport <- data.frame(PosNames,PD,LGD,EAD,beta,stringsAsFactors = F)\nhead(port)\n```\n\nTo simulate the Portfolio Loss Distribution, single factor model is used here, where the credit risk is determined by systematic factor$Z$, along with idiosyncratic risk $\\epsilon$\n$$V_i = \\beta_i Z + \\sqrt{1-\\beta_i^2} \\epsilon_i$$\nwhere Z ~ N(0,1), $\\epsilon$ ~ N(0,1)\n\nRecall that Expected Loss $\\mathbb{E}[Loss] = PD * LGD * EAD$. During the simulation, for each scenario $$Loss = LGD * EAD * 1_{Default}$$ \n$$1_{Default} = \\begin{cases}\n1, && \\text{Default} \\\\\n0, && \\text{Non-Default} \\end{cases}$$ \n\n\nIn Monte Carlo method, only $1_{Default}$ is simulated, and the loan will be Default if asset value $V$ falls below than Default boundary that $V_i < b_i = N^{-1}(PD_i)$\n\nNaive Monte Carlo\n-------------\nSystematic factor simulations are drawn from its original distribution $Z$~$N(0,1)$, and Portfolio loss will be the sum of position losses, and all the scenario are equally weighted as $1/M$\n\n```{r}\n###\nsimMC <- function(port,M){\n  N <- nrow(port)\n  Z <- (rnorm(M,mean=0))\n  LossMC <- matrix(,M,1)\n  for (m in 1:M){\n    e <- rnorm(N,mean=0,sd=1)\n    V <- beta*Z[m] + sqrt(1-beta^2)*e\n    default_flag <- V < qnorm(PD)\n    LossMC[m] <- sum(default_flag * port$EAD * port$LGD)\n  }\n  return (data.frame(Loss=LossMC,Weights=1/M))\n}\n\n\n```\n\nImportance Sampling\n-------------------------\nCredit risk cares mostely about tail risk, that a portfolio can suffer extemre credit event with less than 1%.  Naive Monte Carlo is inefficient as all scenario are equally weighted which requires significant number of simulation to reach a desired level of convegence.  Importance Sampling can improve the variance convergence by shifting the weight more on tails during simulation.  <br>\nIn Importance Sapling Monte Carlo, simulations of Z is drawn from a shifted distribution $N(\\mu,1)$, so that mean of the distirubtion can be shifted to desired distribution.  For example, $\\mu=-3$ is used below representing about 99.86% level of loss.(the lower Z value, the higher probability that loss will occur.)\n\n```{r}\nsimIS <- function(port,M,mu){\n  N <- nrow(port)\n  Z <- (rnorm(M,mean=mu))\n  LossIS <- matrix(,M,1)\n  for (m in 1:M){\n    e <- rnorm(N,mean=0,sd=1)\n    V <- beta*Z[m] + sqrt(1-beta^2)*e\n    #default_treshold <- (qnorm(PD)-Z*t(beta))/sqrt(1-beta^2)\n    default_flag <- V < qnorm(PD)\n    LossIS[m] <- sum(default_flag * port$EAD * port$LGD)\n  }\n  weights <- exp(-mu*Z+mu^2/2)/M\n  return (data.frame(Loss=LossIS,Weights=weights))\n}\n\n\n```\n\n```{r results='hide'}\nlibrary(Hmisc)\nq = c(0.5,0.9,0.95,0.99,0.999,0.9999)\nlossplot <- function(LossRes){\n  LossAmt <- LossRes$Loss\n  LossWgt <- LossRes$Weights\n  Ecdf(LossAmt,weights = LossWgt,datadensity='density',xlim=c(0,10000),ylim=c(0.9,1),q=q)\n}\n\nlossquantile <- function(LossRes){\n  LossAmt <- LossRes$Loss\n  LossWgt <- LossRes$Weights\n  return(wtd.quantile(LossAmt,weights=LossWgt,probs=q,normwt=T,type='i/n'))\n}\n\nLossBench <- simMC(port,100000)\nLossMC <- simMC(port,10000)\nLossIS <- simIS(port,10000,-3)\n\nBenchmark <- lossquantile(LossBench)\nNaiveMC <- lossquantile(LossMC)\nImportanceSampling <- lossquantile(LossIS)\ndf <- data.frame(Benchmark,NaiveMC,ImportanceSampling)\n```\nComparison\n----------------\nThe following table shows the comparison of qifferent quantile using NaiveMC and ImportanceSampling, here the results from 100,000 simulations are used as a benchmark, and use 10,000 simulations for NaiveMC and ImportanceSampling respectively. \n\n```{r}\nt(df)\n```\nFrom 3 plots we can see that:\n1) ImportanceSampling has better convergence than NaiveMC to Benchmark results on Loss Quantiles, espexially on quantiles above 99%\n2) ImportanceSampling generate more samples at extreme losses above 2000.\n```{r}\nlossplot(LossBench)\nlossplot(LossMC)\nlossplot(LossIS)\n\n```\n\n\n\n\n\n",
    "created" : 1413151840261.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3708816698",
    "id" : "4198237F",
    "lastKnownWriteTime" : 1413231794,
    "path" : "~/GitHub/PortfolioCreditRisk/ImportanceSampling/ImportanceSamplingMarkdown.Rmd",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}